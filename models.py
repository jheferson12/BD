from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime
from decimal import Decimal


class CustomerCreate(BaseModel):
    name: str = Field(..., description="Customer's name")
    email: str = Field(..., description="Customer's email")
    phone: str = Field(..., description="Customer's phone")

class Customer(CustomerCreate):
    customer_id: Optional[int] = Field(None, description="Customer ID")
    
    class Config:
        from_attributes = True

class EmployeeCreate(BaseModel):
    name: str = Field(..., description="Employee's name")
    position: str = Field(..., description="Employee's position")
    email: str = Field(..., description="Employee's email")
    phone: str = Field(..., description="Employee's phone")

class Employee(EmployeeCreate):
    employee_id: Optional[int] = Field(None, description="Employee ID")

    class Config:
        from_attributes = True


class OrderCreate(BaseModel):
    customer_id: Optional[int] = None  
    employee_id: Optional[int] = None  
    order_date: datetime  

class Order(OrderCreate):
    order_id: int  


class MenuCreate(BaseModel):
    name: str
    description: Optional[str] = None
    price: Decimal

class Menu(MenuCreate):
    menu_id: int


class OrderDetailCreate(BaseModel):
    order_id: int = Field(..., description="Associated order ID")
    menu_id: int = Field(..., description="Menu item ID")
    quantity: int = Field(..., description="Quantity of the item in the order")

class OrderDetail(OrderDetailCreate):
    order_detail_id: int = Field(..., description="Order detail ID (autogenerated)")

    class Config:
        from_attributes = True


class UploadCreate(BaseModel):
    menu_id: int = Field(None, description="ID of the menu item (optional)")
    upload_date: datetime = Field(..., description="Date and time of the upload")

class Upload(UploadCreate):
    upload_id: int = Field(..., description="Upload ID (autogenerated)")

    class Config:
        from_attributes = True


